// SPDX-License-Identifier: MIT
pragma solidity ^0.8;

/**
 * The emission of SIFA is described in https://sifa.game/whitepaper
 * These rates, if emitted per second, will unlock 800M tokens within 120 epochs (10 years).
 * The basic formula for the rate: baseRate / baseDivider ** (epoch * epochFactor)
 *
 * Values used for precalculation:
 * baseRate = 10
 * baseDivider = 1.024
 * epochFactor = 1.36
 */

/**
 * @notice Contains precalculated emission rated for 120 epochs to prevent complex floating point calculations
 */
abstract contract EmissionRates {
    uint256[120] internal _rates = [
        10000000000000000000,
        9682601515616320000,
        9375277211021540000,
        9077707333276030000,
        8789582278349980000,
        8510602268998590000,
        8240477042861340000,
        7978925550461070000,
        7725675662788410000,
        7480463888167510000,
        7243035098108390000,
        7013142261860650000,
        6790546189392470000,
        6575015282527420000,
        6366325293980040000,
        6164259094039770000,
        5968606444660110000,
        5779163780718330000,
        5595733998217820000,
        5418126249212960000,
        5246155743243000000,
        5079643555068390000,
        4918416438509590000,
        4762306646194510000,
        4611151755027260000,
        4464794497196380000,
        4323082596546910000,
        4185868610145960000,
        4053009774877010000,
        3924367858903190000,
        3799809017845190000,
        3679203655524040000,
        3562426289123820000,
        3449355418634170000,
        3339873400436660000,
        3233866324903460000,
        3131223897881080000,
        3031839325935740000,
        2935609205241050000,
        2842433413992420000,
        2752215008236150000,
        2664860121004930000,
        2580277864654780000,
        2498380236301760000,
        2419082026260130000,
        2342300729386650000,
        2267956459238840000,
        2195971864957780000,
        2126272050789100000,
        2058784498158320000,
        1993438990219510000,
        1930167538798810000,
        1868904313656680000,
        1809585573995400000,
        1752149602140530000,
        1696536639327240000,
        1642688823524860000,
        1590550129234780000,
        1540066309199240000,
        1491184837960220000,
        1443854857209770000,
        1398027122874930000,
        1353653953882150000,
        1310689182547930000,
        1269088106544050000,
        1228807442387410000,
        1189805280406090000,
        1152041041134830000,
        1115475433094430000,
        1080070411911290000,
        1045789140734460000,
        1012595951909060000,
        980456309866159000,
        949336775190565000,
        919204969829048000,
        890029543402879000,
        861780140589601000,
        834427369540092000,
        807942771298063000,
        782298790190187000,
        757468745156032000,
        733426801987978000,
        710147946452243000,
        687607958263030000,
        665783385882745000,
        644651522122043000,
        624190380514326000,
        604378672440114000,
        585195784977483000,
        566621759455525000,
        548637270688525000,
        531223606869231000,
        514362650100319000,
        498036857543777000,
        482229243168617000,
        466923360077896000,
        452103283396690000,
        437753593703190000,
        423859360985700030,
        410406129108830000,
        397379900772738000,
        384767122949758000,
        372554672783265000,
        360729843934119000,
        349280333360453000,
        338194228517090000,
        327459994961227000,
        317066464351528000,
        307002822828122000,
        297258599761406000,
        287823656857977000,
        278688177612328000,
        269842657093348000,
        261277892054998000,
        252984971360876000,
        244955266712697000,
        237180423673056000,
        229652352973125000,
        222363222096244000,
        215305447128642020
    ];

    function rates(uint256 _epoch) external view returns (uint256) {
        if (_epoch < _rates.length) {
            return _rates[_epoch];
        } else {
            return _rates[_rates.length - 1];
        }
    }
}
